df_csv_exam1
df_csv_exam1
# 데이터 로딩
exam <- read.csv("./resData/csv_exam1.csv")
# 앞에서부터 6행까지 출력
head(exam)
# 앞에서부터 10행까지 출력
head(exam, 10)
# 뒤에서부터 6행까지 출력
tail(exam)
# 뒤에서부터 10행까지 출력
tail(exam, 10)
#데이터 뷰어 창에서 데이터 확인(대문자 V로 시작)
View(exam)
#데이터가 몇행 몇열로 구성되어 있는지 출력
dim(exam)
#데이터의 속성 파악
str(exam)
#요약 통계량 산출
summary(exam)
# 상자 그래프(중아값, 사분위수, 이상치 등을 한눈에 파악할 수잇는 그래프)
boxplot(exam$math)
#패키지 설치 및 로드
install.packages("dplyr")
library(dplyr)
#데이터프레임 생성
df_var_change1 <- data.frame(var11 = c(1,2,1),
var12 = c(2,3,2))
df_var_change1
#데이터프레임 복사
df_var_change2 <- df_var_change1
df_var_change2
#컬럼명 변경
names(df_var_change2) <- c("var21", "var22")
df_var_change2
#컬럼명 전체를 소문자로 변경
names(df_var_change2) <- tolower(names(df_var_change2))
df_var_change2
# 변수명 바꾸기 : dplyr함수를 사용해서 var22를 v32로 변경한다.
df_var_change2 <- rename(df_var_change2, v32 = var22)
df_var_change2
df_var_derived <- data.frame(var1 = c(4,3,8),
var2 = c(2,6,1))
df_var_derived
#합계 파생 변수 추가
df_var_derived$var_sum <- df_var_derived$var1 + df_var_derived$var2
df_var_derived
# 평균 파생 변수 추가
df_var_derived$var_mean <- (df_var_derived$var1 + df_var_derived$var2) / 2
df_var_derived
# ggplot2 패키지 로드
library(ggplot2)
# mpg 데이터 준비
# data("mpg") # ggplot2에 내장된 mpg 데이터 불러오기
mpg <- as.data.frame(ggplot2::mpg) # 새로운 데이터프레임 생성
head(mpg)
# tail(mpg)
# View(mpg)
# dim(mpg)
# str(mpg)
# summary(mpg)
?mpg
# 통합 연비 파생 변수 만들기
# 통합 연비 = (도시 연비 + 고속도로 연비) / 2
mpg$total <- (mpg$cty + mpg$hwy) / 2
mpg
# 히스토그램으로 통합 연비 분포 확인
hist(mpg$total,
main = "통합 연비 히스토그램",
xlab = "통합 연비",
col = "skyblue",
border = "white")
# 연비 기준값 정하기
# 기준값: 통합 연비 25 이상을 고연비로 간주
fuel_efficiency_threshold <- 25
# 조건문을 이용한 파생 변수 생성 (합격/불합격)
# 삼항연산자와 같이 "조건, true, false"형식으로 파생변수 생성 통합연비가 25 이상인 경우 '합격'으로 처리
mpg$pass_fail <- ifelse(mpg$total >= fuel_efficiency_threshold,
"합격", "불합격")
# 빈도표 생성
pass_fail_table <- table(mpg$pass_fail)
print(pass_fail_table)
# 막대 그래프로 합격/불합격 빈도 표현
barplot(pass_fail_table,
main = "연비 합격/불합격 빈도",
col = c("tomato", "steelblue"),
names.arg = c("불합격", "합격"),
ylab = "빈도",
xlab = "판정")
# 중첩 조건문 활용한 등급 변수 생성
# 등급 분류 기준:
# A: 통합 연비 >= 30
# B: 25 <= 통합 연비 < 30
# C: 20 <= 통합 연비 < 25
# D: 통합 연비 < 20
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
# 등급 빈도표 생성
grade_table <- table(mpg$grade)
print(grade_table)
# 막대 그래프로 등급 빈도 표현
barplot(grade_table,
main = "통합 연비 등급 빈도",
col = c("gold", "lightgreen", "skyblue", "gray"),
names.arg = c("A", "B", "C", "D"),
ylab = "빈도",
xlab = "등급")
# 조건에 맞는 데이터만 추출하기 : ROW
install.packages("dplyr")
library(dplyr)
# 작업 디렉토리 지정
setwd("C:/workspace/R")
# 샘플 데이터로 데이터프레임 생성
exam <- read.csv("./resData/csv_exam1.csv")
exam
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(Class == 1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
exam
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(Class == 1)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1)
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
# 수학 점수가 50점 초과한 경우
exam %>% filter(math>50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math<50)
# 영어 점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어 점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 1반이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반이면서 영어 점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
# ----------------------------
# or : 여러 조건 중 하나 이상 충족하는 행 추출하기
exam %>% filter(math >= 90 | english >= 90)
exam %>% filter(english < 90 | science < 50)
# ----------------------------
# 목록에 해당하는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)
# %in% 기호는 변수의 값이 지정한 조건 목록에 해당하는지 확인
exam %>%  filter(class %in% c(1,3,5))
# class가 1인 행 추출 후 class1에 할당
class1 <- exam %>% filter(class == 1)
# class2 추출 후 할당
class2 <- exam %>% filter(class == 2)
# 평균 구하기
mean(class1$math)
mean(class2$math)
install.packages("reshape2")
library(reshape2)
# 데이터프레임 한 번에 만들기
df_score <- data.frame(English = c(90, 80, 60, 70),
Math = c(50,60,100,20),
Class = c(1,1,2,2),
Name = c("홍길동", "전우치", "손오공", "해리포터"))
df_score
# 변수명에 대문자가 섞이는 실수를 막기 위해
# 변수명을 구하는 names()와 소문자로 치환하는 tolower()이용
names(df_score) <- tolower(names(df_score))
df_score
library(reshape2)
# 데이터프레임 한 번에 만들기
df_score <- data.frame(English = c(90, 80, 60, 70),
Math = c(50,60,100,20),
Class = c(1,1,2,2),
Name = c("홍길동", "전우치", "손오공", "해리포터"))
df_score
# 변수명에 대문자가 섞이는 실수를 막기 위해
# 변수명을 구하는 names()와 소문자로 치환하는 tolower()이용
names(df_score) <- tolower(names(df_score))
df_score
# melt() 함수 : 가로로 긴 형태의 데이터를 세로로 전환
# 형식 : melt(데이터셋, id.var="기준열", measure.vars="변환열")
# na.rm = TRUE : 결측치 포함
df_score2 <- melt(df_score, id.var="name",
measure.vars="math", na.rm=TRUE)
df_score2
df_score3 <- melt(df_score, id.var="name",
measure.vars=c("english","math"))
df_score3
df_score4 <- melt(df_score, id.var=c("name","class"),
measure.vars=c("english", "math"))
df_score4
# 긴 형식을 넓은 형식으로
#   dcast(데이터셋, 기준열~변환열)
wide1 <- dcast(df_score3, name~variable)
head(wide1)
wide2 <- dcast(df_score4, name + class ~ variable)
head(wide2)
# 결측치 찾기
# 결측치가 포함된 데이터프레임 생성
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5,4,3,4, NA))
df
# 결측치 확인
is.na(df)
# 결측치 빈도 출력
table(is.na(df))
# 성별, 점수의 결측치 빈도
table(is.na(df$sex))
table(is.na(df$score))
# 평균, 합계 산출 - NA출력됨
mean(df$score)
sum(df$score)
# 결측치를 제거하므로 정상 출력됨
mean(df$score, na.rm = T)
sum(df$score, na.rm = T)
# csv에서 데이터 불러오기
exam <- read.csv("./resData/csv_exam1.csv")
# 요소 출력
exam[1, "math"]
# 3, 8, 15행의 math컬럼에 NA할당
exam[c(3, 8, 15), "math"] <- NA
exam
# math 평균 산출 : 결측치 있으므로 NA출력됨
exam %>%  summarise(mean_math = mean(math))
# math 결측치 제외하고  평균 산출
exam %>%  summarise(mean_math = mean(math, na.rm = T))
# 3과목의 평균, 합계, 중간값 산출
exam %>% summarise(mean_math = mean(math, na.rm=T),
sum_math = sum(math, na.rm=T),
median_math = median(math, na.rm=T))
library(dplyr)
table(is.na(df$score))
# score가 NA인 데이터만 출력
df %>% filter(is.na(score))
# score 결측치 제거 후 출력
df %>% filter(!is.na(score))
# 결측치 제거 후 변수에 저장
df_nomiss1 <- df %>%  filter(!is.na(score))
# 평균
mean(df_nomiss1$score)
# 합계
sum(df_nomiss1$score)
# score, sex 결측치 제거
df_nomiss2 <- df %>%  filter(!is.na(score) & !is.na(sex))
df_nomiss2
# 모든 변수에 결측치 없는 데이터 추출
# - 결측치가 하나라도 있다면 제거됨
# - 간편하지만 분석에 필요한 행까지 손실된다는 단점이 있다.
df_nomiss3 <- na.omit(df)
df_nomiss3
# 결측치 제외하고 math 평균 산출
mean(exam$amth, na.rm = T)
# math가 NA면 평균값으로 결측치를 55로 대체
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
# 결측치 빈도표 생성
table(is.na(exam$math))
# 출력
exam
# math 평균 계산
mean(exam$math)
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.fram(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기
# sex가 3이면 NA로 대체
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# score가 5초과하면 NA 대체
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
# 결측치 제거하여 최종 이상치 정제
outlier %>%
filter(!is.na(sex) & ~is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기
# sex가 3이면 NA로 대체
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# score가 5초과하면 NA 대체
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
# 결측치 제거하여 최종 이상치 정제
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
# 결측치 제거하여 최종 이상치 정제
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기
# sex가 3이면 NA로 대체
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# score가 5초과하면 NA 대체
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
# 결측치 제거하여 최종 이상치 정제
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# -------------------------------------------
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기
# sex가 3이면 NA로 대체
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# score가 5초과하면 NA 대체
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
# 결측치 제거하여 최종 이상치 정제
outlier %>%
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
# 이상치 정제하기
# 이상치가 포함된 데이터 생성
outlier <- data.frame(sex = c(1,2,1,3,2,1),
score = c(5,4,3,4,2,6))
outlier
# 이상치 확인
table(outlier$sex)
table(outlier$score)
# 이상치 값을 결측 처리하기
# sex가 3이면 NA로 대체
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# score가 5초과하면 NA 대체
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
# 결측치 제거하여 최종 이상치 정제
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
# -------------------------------------------
boxplot(mpg$hwy)
# 박스플롯 통계치 출력
boxplot(mpg$hwy)$stats
# 12~37 이외 값 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
# 결측치 확인
table(is.na(mpg$hwy))
# 최종 정제
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
#데이터 프레임
# 데이터 준비
english <- c(90, 80, 60, 70)
math <- c(50, 60, 100, 20)
#데이터프레임 만들기
df_midterm <- data.frame(english, math)
df_midterm
#데이터 추가1
class <- c(1,1,2,2)
name <- c("홍길동", "전우치", "손오공", "해리포터")
df_midterm <- data.frame(english, math, class, name)
df_midterm
# 컬럼 추가 : cbind(기존데이터프레임, 추가할 컬럼정보)
df_midterm <- cbind(df_midterm, age=c(25, 26, 27, 28))
df_midterm
# 데이터 추가2 : rbind(기존 데이터프레임, 새로운 데이터프레임)
df_midterm <- rbind(df_midterm, data.frame(english=50, math=50, class=3, name="멀린", age=30))
df_midterm
# 데이터프레임 한 번에 만들기
df_midterm2 <- data.frame(english2 = c(90, 80, 70, 60),
math2 = c(55, 66, 77, 88),
class2 = c(1,1,2,2),
name2 = c("유비", "관우","장비","조자룡"))
english2 # 에러발생. 데이터 프레임의 컬럼으로만 사용되었음.
df_midterm2 #데이터프레임 출력
df_midterm2$english2 #여기서는 영어 컬럼이 출력됨. 컬럼명을 기술할때는 $를 사용함.
#간단한 분석
# 영어의 평균
mean(df_midterm2$english2)
# 수학의 최대값
max(df_midterm2$math2)
# 컬럼 삭제1 : - 부호를 붙여 이 컬럼을 제외한 나머지를 선택하라는 의미
# 즉 선택한 컬럼이 삭제된다.
df_midterm2 <- subset(df_midterm2, select=-class2)
df_midterm2
# 컬럼 삭제2 : 컬럼 선택 후 Null을 할당
df_midterm2$name2 <- Null
# 컬럼 삭제2 : 컬럼 선택 후 Null을 할당
df_midterm2$name2 <- NULL
df_midterm2
# 컬럼 삭제3 : 1번 인덱스 컬럼 삭제
df_midterm2 <- df_midterm2[, -1]
df_midterm2
# 산점도 만들기
# 데이터 준비
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(X=displ, y=hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x=displ, y=hwy)) + geom_point()
# x축 범위를 3~6으로 지정
ggplot(data = mpg, aes(x=displ, y=hwy)) + geom_point() + xlim(3,6)
# y축 범위를 10~30으로 지정
ggplot(data = mpg, aes(x=displ, y=hwy))
+ geom_point()
# 산점도 만들기
# 데이터 준비
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
# x축 displ, y축 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(X=displ, y=hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x=displ, y=hwy)) + geom_point()
# x축 범위를 3~6으로 지정
ggplot(data = mpg, aes(x=displ, y=hwy)) + geom_point() + xlim(3,6)
# y축 범위를 10~30으로 지정
ggplot(data = mpg, aes(x=displ, y=hwy)) +
geom_point() +
xlim(3,6) +
ylim(10,30)
# 빈도 막대 그래프 만들기
# y축 없이 x축만 지정하고 geom_col()대신에 geom_bar()를 사용한다.
ggplot(data = mpg, aes(x=drv)) + geom_bar()
# 막대그래프 : 집단 간 차이 표현하기
library(dplyr)
# 집단별 평균표 만들기
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
# 그래프 생성하기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
# 크기 순으로 정렬하기
# -막대는 기본적으로 범주의 알파벳 순서로 정렬됨
# -reorder()를 사용하면 값의 크기 순으로 정렬할 수 있다.
# -정렬 기준 변수 앞에 - 기호를 붙이면 내림차순으로 정렬할 수 잇다.
ggplot(data = df_mpg, aes(x=reorder(drv, mean_hwy), y = mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x=reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
# 빈도 막대 그래프 만들기
# y축 없이 x축만 지정하고 geom_col()대신에 geom_bar()를 사용한다.
ggplot(data = mpg, aes(x=drv)) + geom_bar()
ggplot(data = mpg, aes(x=hwy)) + geom_bar()
# 집단별 평균표 만들기
# drv는 전륜(f), 후륜(r), 4륜(4)를 의미
# 그룹으로 만든 후 고속도로 연비의 평균을 구함
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
# 그래프 생성하기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
mpg
economics
# x축 : 시간, y축 : 실업자
ggplot(data= economics, aes(x=date, y=unemploy)) + geom_line()
economics
# 상자그림 - 집단 간 분포 차이 표현하기
mpg
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
boxplot(mpg$hwy)
?boxplot
